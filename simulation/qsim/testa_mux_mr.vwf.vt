// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/03/2021 09:20:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_memreg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_memreg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg MemToReg;
reg [31:0] ULAres;
reg [31:0] memout;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
mux_memreg i1 (
// port map - connection between master ports and signals/registers   
	.MemToReg(MemToReg),
	.ULAres(ULAres),
	.memout(memout),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// MemToReg
initial
begin
	MemToReg = 1'b1;
	MemToReg = #300000 1'b0;
	MemToReg = #300000 1'b1;
	MemToReg = #300000 1'b0;
end 
// ULAres[ 31 ]
initial
begin
	ULAres[31] = 1'b0;
end 
// ULAres[ 30 ]
initial
begin
	ULAres[30] = 1'b0;
end 
// ULAres[ 29 ]
initial
begin
	ULAres[29] = 1'b0;
end 
// ULAres[ 28 ]
initial
begin
	ULAres[28] = 1'b0;
end 
// ULAres[ 27 ]
initial
begin
	ULAres[27] = 1'b0;
end 
// ULAres[ 26 ]
initial
begin
	ULAres[26] = 1'b0;
end 
// ULAres[ 25 ]
initial
begin
	ULAres[25] = 1'b0;
end 
// ULAres[ 24 ]
initial
begin
	ULAres[24] = 1'b0;
end 
// ULAres[ 23 ]
initial
begin
	ULAres[23] = 1'b0;
end 
// ULAres[ 22 ]
initial
begin
	ULAres[22] = 1'b0;
end 
// ULAres[ 21 ]
initial
begin
	ULAres[21] = 1'b0;
end 
// ULAres[ 20 ]
initial
begin
	ULAres[20] = 1'b0;
end 
// ULAres[ 19 ]
initial
begin
	ULAres[19] = 1'b0;
end 
// ULAres[ 18 ]
initial
begin
	ULAres[18] = 1'b0;
end 
// ULAres[ 17 ]
initial
begin
	ULAres[17] = 1'b0;
end 
// ULAres[ 16 ]
initial
begin
	ULAres[16] = 1'b0;
end 
// ULAres[ 15 ]
initial
begin
	ULAres[15] = 1'b0;
end 
// ULAres[ 14 ]
initial
begin
	ULAres[14] = 1'b0;
end 
// ULAres[ 13 ]
initial
begin
	ULAres[13] = 1'b0;
end 
// ULAres[ 12 ]
initial
begin
	ULAres[12] = 1'b0;
end 
// ULAres[ 11 ]
initial
begin
	ULAres[11] = 1'b0;
end 
// ULAres[ 10 ]
initial
begin
	ULAres[10] = 1'b0;
end 
// ULAres[ 9 ]
initial
begin
	ULAres[9] = 1'b0;
end 
// ULAres[ 8 ]
initial
begin
	ULAres[8] = 1'b0;
end 
// ULAres[ 7 ]
initial
begin
	ULAres[7] = 1'b0;
end 
// ULAres[ 6 ]
initial
begin
	ULAres[6] = 1'b0;
end 
// ULAres[ 5 ]
initial
begin
	ULAres[5] = 1'b0;
end 
// ULAres[ 4 ]
initial
begin
	ULAres[4] = 1'b0;
end 
// ULAres[ 3 ]
initial
begin
	ULAres[3] = 1'b0;
end 
// ULAres[ 2 ]
initial
begin
	ULAres[2] = 1'b1;
end 
// ULAres[ 1 ]
initial
begin
	ULAres[1] = 1'b0;
end 
// ULAres[ 0 ]
initial
begin
	ULAres[0] = 1'b0;
end 
// memout[ 31 ]
initial
begin
	memout[31] = 1'b0;
end 
// memout[ 30 ]
initial
begin
	memout[30] = 1'b0;
end 
// memout[ 29 ]
initial
begin
	memout[29] = 1'b0;
end 
// memout[ 28 ]
initial
begin
	memout[28] = 1'b0;
end 
// memout[ 27 ]
initial
begin
	memout[27] = 1'b0;
end 
// memout[ 26 ]
initial
begin
	memout[26] = 1'b0;
end 
// memout[ 25 ]
initial
begin
	memout[25] = 1'b0;
end 
// memout[ 24 ]
initial
begin
	memout[24] = 1'b0;
end 
// memout[ 23 ]
initial
begin
	memout[23] = 1'b0;
end 
// memout[ 22 ]
initial
begin
	memout[22] = 1'b0;
end 
// memout[ 21 ]
initial
begin
	memout[21] = 1'b0;
end 
// memout[ 20 ]
initial
begin
	memout[20] = 1'b0;
end 
// memout[ 19 ]
initial
begin
	memout[19] = 1'b0;
end 
// memout[ 18 ]
initial
begin
	memout[18] = 1'b0;
end 
// memout[ 17 ]
initial
begin
	memout[17] = 1'b0;
end 
// memout[ 16 ]
initial
begin
	memout[16] = 1'b0;
end 
// memout[ 15 ]
initial
begin
	memout[15] = 1'b0;
end 
// memout[ 14 ]
initial
begin
	memout[14] = 1'b0;
end 
// memout[ 13 ]
initial
begin
	memout[13] = 1'b0;
end 
// memout[ 12 ]
initial
begin
	memout[12] = 1'b0;
end 
// memout[ 11 ]
initial
begin
	memout[11] = 1'b0;
end 
// memout[ 10 ]
initial
begin
	memout[10] = 1'b0;
end 
// memout[ 9 ]
initial
begin
	memout[9] = 1'b0;
end 
// memout[ 8 ]
initial
begin
	memout[8] = 1'b0;
end 
// memout[ 7 ]
initial
begin
	memout[7] = 1'b0;
end 
// memout[ 6 ]
initial
begin
	memout[6] = 1'b0;
end 
// memout[ 5 ]
initial
begin
	memout[5] = 1'b0;
end 
// memout[ 4 ]
initial
begin
	memout[4] = 1'b0;
end 
// memout[ 3 ]
initial
begin
	memout[3] = 1'b1;
end 
// memout[ 2 ]
initial
begin
	memout[2] = 1'b0;
end 
// memout[ 1 ]
initial
begin
	memout[1] = 1'b1;
end 
// memout[ 0 ]
initial
begin
	memout[0] = 1'b0;
end 
endmodule

