// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2021 10:54:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          gerencia_PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gerencia_PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] novoPC;
// wires                                               
wire [31:0] atualPC;

// assign statements (if any)                          
gerencia_PC i1 (
// port map - connection between master ports and signals/registers   
	.atualPC(atualPC),
	.clk(clk),
	.novoPC(novoPC)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	#100000;
end 
// novoPC[ 31 ]
initial
begin
	novoPC[31] = 1'b0;
end 
// novoPC[ 30 ]
initial
begin
	novoPC[30] = 1'b0;
end 
// novoPC[ 29 ]
initial
begin
	novoPC[29] = 1'b0;
end 
// novoPC[ 28 ]
initial
begin
	novoPC[28] = 1'b0;
end 
// novoPC[ 27 ]
initial
begin
	novoPC[27] = 1'b0;
end 
// novoPC[ 26 ]
initial
begin
	novoPC[26] = 1'b0;
end 
// novoPC[ 25 ]
initial
begin
	novoPC[25] = 1'b0;
end 
// novoPC[ 24 ]
initial
begin
	novoPC[24] = 1'b0;
end 
// novoPC[ 23 ]
initial
begin
	novoPC[23] = 1'b0;
end 
// novoPC[ 22 ]
initial
begin
	novoPC[22] = 1'b0;
end 
// novoPC[ 21 ]
initial
begin
	novoPC[21] = 1'b0;
end 
// novoPC[ 20 ]
initial
begin
	novoPC[20] = 1'b0;
end 
// novoPC[ 19 ]
initial
begin
	novoPC[19] = 1'b0;
end 
// novoPC[ 18 ]
initial
begin
	novoPC[18] = 1'b0;
end 
// novoPC[ 17 ]
initial
begin
	novoPC[17] = 1'b0;
end 
// novoPC[ 16 ]
initial
begin
	novoPC[16] = 1'b0;
end 
// novoPC[ 15 ]
initial
begin
	novoPC[15] = 1'b0;
end 
// novoPC[ 14 ]
initial
begin
	novoPC[14] = 1'b0;
end 
// novoPC[ 13 ]
initial
begin
	novoPC[13] = 1'b0;
end 
// novoPC[ 12 ]
initial
begin
	novoPC[12] = 1'b0;
end 
// novoPC[ 11 ]
initial
begin
	novoPC[11] = 1'b0;
end 
// novoPC[ 10 ]
initial
begin
	novoPC[10] = 1'b0;
end 
// novoPC[ 9 ]
initial
begin
	novoPC[9] = 1'b0;
end 
// novoPC[ 8 ]
initial
begin
	novoPC[8] = 1'b0;
end 
// novoPC[ 7 ]
initial
begin
	novoPC[7] = 1'b0;
end 
// novoPC[ 6 ]
initial
begin
	novoPC[6] = 1'b0;
end 
// novoPC[ 5 ]
initial
begin
	novoPC[5] = 1'b0;
end 
// novoPC[ 4 ]
initial
begin
	novoPC[4] = 1'b0;
end 
// novoPC[ 3 ]
initial
begin
	novoPC[3] = 1'b0;
end 
// novoPC[ 2 ]
initial
begin
	novoPC[2] = 1'b0;
end 
// novoPC[ 1 ]
initial
begin
	novoPC[1] = 1'b0;
	novoPC[1] = #600000 1'b1;
end 
// novoPC[ 0 ]
initial
begin
	novoPC[0] = 1'b0;
	novoPC[0] = #300000 1'b1;
	novoPC[0] = #300000 1'b0;
	novoPC[0] = #300000 1'b1;
end 
endmodule

