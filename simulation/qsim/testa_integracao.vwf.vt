// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2020 15:35:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          testa_unid_controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testa_unid_controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [3:0] ALUOp;
wire ALUSrc;
wire MemToReg;
wire MemWrite;
wire PCSrc;
wire SeltipoSouB;
wire [2:0] Tipo_Branch;
wire [31:0] atualPC;
wire [31:0] breg_in;
wire [31:0] dado;
wire [31:0] imed;
wire [31:0] imed_p2muxed;
wire [31:0] inst;
wire [31:0] memout;
wire n;
wire [31:0] novoPC;
wire [4:0] rd;
wire regWrite;
wire [4:0] rl1;
wire [31:0] rl1out;
wire [4:0] rl2;
wire [31:0] rl2out;
wire [1:0] selSLT_JAL;
wire [31:0] ula_in2;
wire [31:0] ulares;
wire z;

// assign statements (if any)                          
testa_unid_controle i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.ALUSrc(ALUSrc),
	.MemToReg(MemToReg),
	.MemWrite(MemWrite),
	.PCSrc(PCSrc),
	.SeltipoSouB(SeltipoSouB),
	.Tipo_Branch(Tipo_Branch),
	.atualPC(atualPC),
	.breg_in(breg_in),
	.clk(clk),
	.dado(dado),
	.imed(imed),
	.imed_p2muxed(imed_p2muxed),
	.inst(inst),
	.memout(memout),
	.n(n),
	.novoPC(novoPC),
	.rd(rd),
	.regWrite(regWrite),
	.rl1(rl1),
	.rl1out(rl1out),
	.rl2(rl2),
	.rl2out(rl2out),
	.selSLT_JAL(selSLT_JAL),
	.ula_in2(ula_in2),
	.ulares(ulares),
	.z(z)
);
initial 
begin 
#3000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #150000 1'b1;
	#150000;
end 
endmodule

