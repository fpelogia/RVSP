// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/03/2021 09:16:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALUSrc;
reg [31:0] dado2;
reg [31:0] imed;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
mux_ula i1 (
// port map - connection between master ports and signals/registers   
	.ALUSrc(ALUSrc),
	.dado2(dado2),
	.imed(imed),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// ALUSrc
initial
begin
	ALUSrc = 1'b1;
	ALUSrc = #300000 1'b0;
	ALUSrc = #300000 1'b1;
	ALUSrc = #300000 1'b0;
end 
// dado2[ 31 ]
initial
begin
	dado2[31] = 1'b0;
end 
// dado2[ 30 ]
initial
begin
	dado2[30] = 1'b0;
end 
// dado2[ 29 ]
initial
begin
	dado2[29] = 1'b0;
end 
// dado2[ 28 ]
initial
begin
	dado2[28] = 1'b0;
end 
// dado2[ 27 ]
initial
begin
	dado2[27] = 1'b0;
end 
// dado2[ 26 ]
initial
begin
	dado2[26] = 1'b0;
end 
// dado2[ 25 ]
initial
begin
	dado2[25] = 1'b0;
end 
// dado2[ 24 ]
initial
begin
	dado2[24] = 1'b0;
end 
// dado2[ 23 ]
initial
begin
	dado2[23] = 1'b0;
end 
// dado2[ 22 ]
initial
begin
	dado2[22] = 1'b0;
end 
// dado2[ 21 ]
initial
begin
	dado2[21] = 1'b0;
end 
// dado2[ 20 ]
initial
begin
	dado2[20] = 1'b0;
end 
// dado2[ 19 ]
initial
begin
	dado2[19] = 1'b0;
end 
// dado2[ 18 ]
initial
begin
	dado2[18] = 1'b0;
end 
// dado2[ 17 ]
initial
begin
	dado2[17] = 1'b0;
end 
// dado2[ 16 ]
initial
begin
	dado2[16] = 1'b0;
end 
// dado2[ 15 ]
initial
begin
	dado2[15] = 1'b0;
end 
// dado2[ 14 ]
initial
begin
	dado2[14] = 1'b0;
end 
// dado2[ 13 ]
initial
begin
	dado2[13] = 1'b0;
end 
// dado2[ 12 ]
initial
begin
	dado2[12] = 1'b0;
end 
// dado2[ 11 ]
initial
begin
	dado2[11] = 1'b0;
end 
// dado2[ 10 ]
initial
begin
	dado2[10] = 1'b0;
end 
// dado2[ 9 ]
initial
begin
	dado2[9] = 1'b0;
end 
// dado2[ 8 ]
initial
begin
	dado2[8] = 1'b0;
end 
// dado2[ 7 ]
initial
begin
	dado2[7] = 1'b0;
end 
// dado2[ 6 ]
initial
begin
	dado2[6] = 1'b0;
end 
// dado2[ 5 ]
initial
begin
	dado2[5] = 1'b0;
end 
// dado2[ 4 ]
initial
begin
	dado2[4] = 1'b0;
end 
// dado2[ 3 ]
initial
begin
	dado2[3] = 1'b0;
end 
// dado2[ 2 ]
initial
begin
	dado2[2] = 1'b0;
end 
// dado2[ 1 ]
initial
begin
	dado2[1] = 1'b1;
end 
// dado2[ 0 ]
initial
begin
	dado2[0] = 1'b0;
end 
// imed[ 31 ]
initial
begin
	imed[31] = 1'b0;
end 
// imed[ 30 ]
initial
begin
	imed[30] = 1'b0;
end 
// imed[ 29 ]
initial
begin
	imed[29] = 1'b0;
end 
// imed[ 28 ]
initial
begin
	imed[28] = 1'b0;
end 
// imed[ 27 ]
initial
begin
	imed[27] = 1'b0;
end 
// imed[ 26 ]
initial
begin
	imed[26] = 1'b0;
end 
// imed[ 25 ]
initial
begin
	imed[25] = 1'b0;
end 
// imed[ 24 ]
initial
begin
	imed[24] = 1'b0;
end 
// imed[ 23 ]
initial
begin
	imed[23] = 1'b0;
end 
// imed[ 22 ]
initial
begin
	imed[22] = 1'b0;
end 
// imed[ 21 ]
initial
begin
	imed[21] = 1'b0;
end 
// imed[ 20 ]
initial
begin
	imed[20] = 1'b0;
end 
// imed[ 19 ]
initial
begin
	imed[19] = 1'b0;
end 
// imed[ 18 ]
initial
begin
	imed[18] = 1'b0;
end 
// imed[ 17 ]
initial
begin
	imed[17] = 1'b0;
end 
// imed[ 16 ]
initial
begin
	imed[16] = 1'b0;
end 
// imed[ 15 ]
initial
begin
	imed[15] = 1'b0;
end 
// imed[ 14 ]
initial
begin
	imed[14] = 1'b0;
end 
// imed[ 13 ]
initial
begin
	imed[13] = 1'b0;
end 
// imed[ 12 ]
initial
begin
	imed[12] = 1'b0;
end 
// imed[ 11 ]
initial
begin
	imed[11] = 1'b0;
end 
// imed[ 10 ]
initial
begin
	imed[10] = 1'b0;
end 
// imed[ 9 ]
initial
begin
	imed[9] = 1'b0;
end 
// imed[ 8 ]
initial
begin
	imed[8] = 1'b0;
end 
// imed[ 7 ]
initial
begin
	imed[7] = 1'b0;
end 
// imed[ 6 ]
initial
begin
	imed[6] = 1'b0;
end 
// imed[ 5 ]
initial
begin
	imed[5] = 1'b0;
end 
// imed[ 4 ]
initial
begin
	imed[4] = 1'b0;
end 
// imed[ 3 ]
initial
begin
	imed[3] = 1'b0;
end 
// imed[ 2 ]
initial
begin
	imed[2] = 1'b0;
end 
// imed[ 1 ]
initial
begin
	imed[1] = 1'b1;
end 
// imed[ 0 ]
initial
begin
	imed[0] = 1'b1;
end 
endmodule

