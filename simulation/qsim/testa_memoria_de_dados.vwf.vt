// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/03/2021 09:29:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          memoria_de_dados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memoria_de_dados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] end_esc;
reg [5:0] end_lei;
reg [31:0] entr;
reg h_esc;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
memoria_de_dados i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.end_esc(end_esc),
	.end_lei(end_lei),
	.entr(entr),
	.h_esc(h_esc),
	.saida(saida)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(6)
	begin
		clk = 1'b0;
		clk = #80000 1'b1;
		# 80000;
	end
	clk = 1'b0;
end 
// end_esc[ 5 ]
initial
begin
	end_esc[5] = 1'b0;
end 
// end_esc[ 4 ]
initial
begin
	end_esc[4] = 1'b0;
end 
// end_esc[ 3 ]
initial
begin
	end_esc[3] = 1'b0;
end 
// end_esc[ 2 ]
initial
begin
	end_esc[2] = 1'b0;
end 
// end_esc[ 1 ]
initial
begin
	end_esc[1] = 1'b0;
end 
// end_esc[ 0 ]
initial
begin
	end_esc[0] = 1'b1;
end 
// end_lei[ 5 ]
initial
begin
	end_lei[5] = 1'b0;
end 
// end_lei[ 4 ]
initial
begin
	end_lei[4] = 1'b0;
end 
// end_lei[ 3 ]
initial
begin
	end_lei[3] = 1'b0;
end 
// end_lei[ 2 ]
initial
begin
	end_lei[2] = 1'b0;
	end_lei[2] = #520000 1'b1;
end 
// end_lei[ 1 ]
initial
begin
	end_lei[1] = 1'b0;
	end_lei[1] = #260000 1'b1;
	end_lei[1] = #260000 1'b0;
	end_lei[1] = #260000 1'b1;
end 
// end_lei[ 0 ]
initial
begin
	repeat(3)
	begin
		end_lei[0] = 1'b0;
		end_lei[0] = #130000 1'b1;
		# 130000;
	end
	end_lei[0] = 1'b0;
	end_lei[0] = #130000 1'b1;
end 
// entr[ 31 ]
initial
begin
	entr[31] = 1'b0;
end 
// entr[ 30 ]
initial
begin
	entr[30] = 1'b0;
end 
// entr[ 29 ]
initial
begin
	entr[29] = 1'b0;
end 
// entr[ 28 ]
initial
begin
	entr[28] = 1'b0;
end 
// entr[ 27 ]
initial
begin
	entr[27] = 1'b0;
end 
// entr[ 26 ]
initial
begin
	entr[26] = 1'b0;
end 
// entr[ 25 ]
initial
begin
	entr[25] = 1'b0;
end 
// entr[ 24 ]
initial
begin
	entr[24] = 1'b0;
end 
// entr[ 23 ]
initial
begin
	entr[23] = 1'b0;
end 
// entr[ 22 ]
initial
begin
	entr[22] = 1'b0;
end 
// entr[ 21 ]
initial
begin
	entr[21] = 1'b0;
end 
// entr[ 20 ]
initial
begin
	entr[20] = 1'b0;
end 
// entr[ 19 ]
initial
begin
	entr[19] = 1'b0;
end 
// entr[ 18 ]
initial
begin
	entr[18] = 1'b0;
end 
// entr[ 17 ]
initial
begin
	entr[17] = 1'b0;
end 
// entr[ 16 ]
initial
begin
	entr[16] = 1'b0;
end 
// entr[ 15 ]
initial
begin
	entr[15] = 1'b0;
end 
// entr[ 14 ]
initial
begin
	entr[14] = 1'b0;
end 
// entr[ 13 ]
initial
begin
	entr[13] = 1'b0;
end 
// entr[ 12 ]
initial
begin
	entr[12] = 1'b0;
end 
// entr[ 11 ]
initial
begin
	entr[11] = 1'b0;
end 
// entr[ 10 ]
initial
begin
	entr[10] = 1'b0;
end 
// entr[ 9 ]
initial
begin
	entr[9] = 1'b0;
end 
// entr[ 8 ]
initial
begin
	entr[8] = 1'b0;
end 
// entr[ 7 ]
initial
begin
	entr[7] = 1'b0;
end 
// entr[ 6 ]
initial
begin
	entr[6] = 1'b0;
end 
// entr[ 5 ]
initial
begin
	entr[5] = 1'b0;
end 
// entr[ 4 ]
initial
begin
	entr[4] = 1'b0;
end 
// entr[ 3 ]
initial
begin
	entr[3] = 1'b0;
end 
// entr[ 2 ]
initial
begin
	entr[2] = 1'b0;
end 
// entr[ 1 ]
initial
begin
	entr[1] = 1'b1;
end 
// entr[ 0 ]
initial
begin
	entr[0] = 1'b0;
end 

// h_esc
initial
begin
	h_esc = 1'b1;
	# 150000;
	repeat(2)
	begin
		h_esc = 1'b0;
		h_esc = #150000 1'b1;
		# 150000;
	end
	h_esc = 1'b0;
	h_esc = #150000 1'b1;
end 
endmodule

