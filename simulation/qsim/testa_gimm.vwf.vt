// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2021 11:09:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          gera_imediato
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gera_imediato_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] entr_parte1;
reg [4:0] entr_parte2;
reg [18:0] imed19;
reg [1:0] selSLT_JAL;
// wires                                               
wire [31:0] saida;

// assign statements (if any)                          
gera_imediato i1 (
// port map - connection between master ports and signals/registers   
	.entr_parte1(entr_parte1),
	.entr_parte2(entr_parte2),
	.imed19(imed19),
	.saida(saida),
	.selSLT_JAL(selSLT_JAL)
);
initial 
begin 
#200000 $finish;
end 
// entr_parte1[ 6 ]
initial
begin
	entr_parte1[6] = 1'b0;
end 
// entr_parte1[ 5 ]
initial
begin
	entr_parte1[5] = 1'b0;
end 
// entr_parte1[ 4 ]
initial
begin
	entr_parte1[4] = 1'b0;
end 
// entr_parte1[ 3 ]
initial
begin
	entr_parte1[3] = 1'b0;
end 
// entr_parte1[ 2 ]
initial
begin
	entr_parte1[2] = 1'b0;
end 
// entr_parte1[ 1 ]
initial
begin
	entr_parte1[1] = 1'b0;
end 
// entr_parte1[ 0 ]
initial
begin
	entr_parte1[0] = 1'b0;
end 
// entr_parte2[ 4 ]
initial
begin
	entr_parte2[4] = 1'b0;
end 
// entr_parte2[ 3 ]
initial
begin
	entr_parte2[3] = 1'b1;
	entr_parte2[3] = #199000 1'b0;
end 
// entr_parte2[ 2 ]
initial
begin
	entr_parte2[2] = 1'b0;
end 
// entr_parte2[ 1 ]
initial
begin
	entr_parte2[1] = 1'b1;
	entr_parte2[1] = #199000 1'b0;
end 
// entr_parte2[ 0 ]
initial
begin
	entr_parte2[0] = 1'b0;
end 
// imed19[ 18 ]
initial
begin
	imed19[18] = 1'b0;
end 
// imed19[ 17 ]
initial
begin
	imed19[17] = 1'b0;
end 
// imed19[ 16 ]
initial
begin
	imed19[16] = 1'b0;
end 
// imed19[ 15 ]
initial
begin
	imed19[15] = 1'b0;
end 
// imed19[ 14 ]
initial
begin
	imed19[14] = 1'b0;
end 
// imed19[ 13 ]
initial
begin
	imed19[13] = 1'b0;
end 
// imed19[ 12 ]
initial
begin
	imed19[12] = 1'b0;
end 
// imed19[ 11 ]
initial
begin
	imed19[11] = 1'b0;
end 
// imed19[ 10 ]
initial
begin
	imed19[10] = 1'b0;
end 
// imed19[ 9 ]
initial
begin
	imed19[9] = 1'b0;
end 
// imed19[ 8 ]
initial
begin
	imed19[8] = 1'b0;
end 
// imed19[ 7 ]
initial
begin
	imed19[7] = 1'b0;
end 
// imed19[ 6 ]
initial
begin
	imed19[6] = 1'b0;
end 
// imed19[ 5 ]
initial
begin
	imed19[5] = 1'b0;
end 
// imed19[ 4 ]
initial
begin
	imed19[4] = 1'b0;
end 
// imed19[ 3 ]
initial
begin
	imed19[3] = 1'b0;
end 
// imed19[ 2 ]
initial
begin
	imed19[2] = 1'b1;
end 
// imed19[ 1 ]
initial
begin
	imed19[1] = 1'b1;
end 
// imed19[ 0 ]
initial
begin
	imed19[0] = 1'b1;
end 
// selSLT_JAL[ 1 ]
initial
begin
	selSLT_JAL[1] = 1'b0;
	selSLT_JAL[1] = #100000 1'b1;
	selSLT_JAL[1] = #99000 1'b0;
end 
// selSLT_JAL[ 0 ]
initial
begin
	selSLT_JAL[0] = 1'b0;
	selSLT_JAL[0] = #50000 1'b1;
	selSLT_JAL[0] = #50000 1'b0;
	selSLT_JAL[0] = #50000 1'b1;
	selSLT_JAL[0] = #49000 1'b0;
end 
endmodule

