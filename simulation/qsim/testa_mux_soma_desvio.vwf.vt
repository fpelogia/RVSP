// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/03/2021 09:56:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_soma_desvio
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_soma_desvio_vlg_vec_tst();
// constants                                           
// general purpose registers
reg PCSrc;
reg [2:0] Tipo_Branch;
reg [31:0] ULA_res;
reg [31:0] atualPC;
reg [31:0] imed;
reg neg;
reg zero;
// wires                                               
wire [31:0] novoPC;

// assign statements (if any)                          
mux_soma_desvio i1 (
// port map - connection between master ports and signals/registers   
	.PCSrc(PCSrc),
	.Tipo_Branch(Tipo_Branch),
	.ULA_res(ULA_res),
	.atualPC(atualPC),
	.imed(imed),
	.neg(neg),
	.novoPC(novoPC),
	.zero(zero)
);
initial 
begin 
#400000 $finish;
end 

// PCSrc
initial
begin
	PCSrc = 1'b1;
end 
// Tipo_Branch[ 2 ]
always
begin
	Tipo_Branch[2] = 1'b0;
	Tipo_Branch[2] = #200000 1'b1;
	#200000;
end 
// Tipo_Branch[ 1 ]
always
begin
	Tipo_Branch[1] = 1'b0;
	Tipo_Branch[1] = #100000 1'b1;
	#100000;
end 
// Tipo_Branch[ 0 ]
always
begin
	Tipo_Branch[0] = 1'b0;
	Tipo_Branch[0] = #50000 1'b1;
	#50000;
end 
// ULA_res[ 31 ]
initial
begin
	ULA_res[31] = 1'b0;
end 
// ULA_res[ 30 ]
initial
begin
	ULA_res[30] = 1'b0;
end 
// ULA_res[ 29 ]
initial
begin
	ULA_res[29] = 1'b0;
end 
// ULA_res[ 28 ]
initial
begin
	ULA_res[28] = 1'b0;
end 
// ULA_res[ 27 ]
initial
begin
	ULA_res[27] = 1'b0;
end 
// ULA_res[ 26 ]
initial
begin
	ULA_res[26] = 1'b0;
end 
// ULA_res[ 25 ]
initial
begin
	ULA_res[25] = 1'b0;
end 
// ULA_res[ 24 ]
initial
begin
	ULA_res[24] = 1'b0;
end 
// ULA_res[ 23 ]
initial
begin
	ULA_res[23] = 1'b0;
end 
// ULA_res[ 22 ]
initial
begin
	ULA_res[22] = 1'b0;
end 
// ULA_res[ 21 ]
initial
begin
	ULA_res[21] = 1'b0;
end 
// ULA_res[ 20 ]
initial
begin
	ULA_res[20] = 1'b0;
end 
// ULA_res[ 19 ]
initial
begin
	ULA_res[19] = 1'b0;
end 
// ULA_res[ 18 ]
initial
begin
	ULA_res[18] = 1'b0;
end 
// ULA_res[ 17 ]
initial
begin
	ULA_res[17] = 1'b0;
end 
// ULA_res[ 16 ]
initial
begin
	ULA_res[16] = 1'b0;
end 
// ULA_res[ 15 ]
initial
begin
	ULA_res[15] = 1'b0;
end 
// ULA_res[ 14 ]
initial
begin
	ULA_res[14] = 1'b0;
end 
// ULA_res[ 13 ]
initial
begin
	ULA_res[13] = 1'b0;
end 
// ULA_res[ 12 ]
initial
begin
	ULA_res[12] = 1'b0;
end 
// ULA_res[ 11 ]
initial
begin
	ULA_res[11] = 1'b0;
end 
// ULA_res[ 10 ]
initial
begin
	ULA_res[10] = 1'b0;
end 
// ULA_res[ 9 ]
initial
begin
	ULA_res[9] = 1'b0;
end 
// ULA_res[ 8 ]
initial
begin
	ULA_res[8] = 1'b0;
end 
// ULA_res[ 7 ]
initial
begin
	ULA_res[7] = 1'b0;
end 
// ULA_res[ 6 ]
initial
begin
	ULA_res[6] = 1'b0;
end 
// ULA_res[ 5 ]
initial
begin
	ULA_res[5] = 1'b0;
end 
// ULA_res[ 4 ]
initial
begin
	ULA_res[4] = 1'b0;
end 
// ULA_res[ 3 ]
initial
begin
	ULA_res[3] = 1'b0;
end 
// ULA_res[ 2 ]
initial
begin
	ULA_res[2] = 1'b0;
end 
// ULA_res[ 1 ]
initial
begin
	ULA_res[1] = 1'b0;
end 
// ULA_res[ 0 ]
initial
begin
	ULA_res[0] = 1'b1;
end 
// atualPC[ 31 ]
initial
begin
	atualPC[31] = 1'b0;
end 
// atualPC[ 30 ]
initial
begin
	atualPC[30] = 1'b0;
end 
// atualPC[ 29 ]
initial
begin
	atualPC[29] = 1'b0;
end 
// atualPC[ 28 ]
initial
begin
	atualPC[28] = 1'b0;
end 
// atualPC[ 27 ]
initial
begin
	atualPC[27] = 1'b0;
end 
// atualPC[ 26 ]
initial
begin
	atualPC[26] = 1'b0;
end 
// atualPC[ 25 ]
initial
begin
	atualPC[25] = 1'b0;
end 
// atualPC[ 24 ]
initial
begin
	atualPC[24] = 1'b0;
end 
// atualPC[ 23 ]
initial
begin
	atualPC[23] = 1'b0;
end 
// atualPC[ 22 ]
initial
begin
	atualPC[22] = 1'b0;
end 
// atualPC[ 21 ]
initial
begin
	atualPC[21] = 1'b0;
end 
// atualPC[ 20 ]
initial
begin
	atualPC[20] = 1'b0;
end 
// atualPC[ 19 ]
initial
begin
	atualPC[19] = 1'b0;
end 
// atualPC[ 18 ]
initial
begin
	atualPC[18] = 1'b0;
end 
// atualPC[ 17 ]
initial
begin
	atualPC[17] = 1'b0;
end 
// atualPC[ 16 ]
initial
begin
	atualPC[16] = 1'b0;
end 
// atualPC[ 15 ]
initial
begin
	atualPC[15] = 1'b0;
end 
// atualPC[ 14 ]
initial
begin
	atualPC[14] = 1'b0;
end 
// atualPC[ 13 ]
initial
begin
	atualPC[13] = 1'b0;
end 
// atualPC[ 12 ]
initial
begin
	atualPC[12] = 1'b0;
end 
// atualPC[ 11 ]
initial
begin
	atualPC[11] = 1'b0;
end 
// atualPC[ 10 ]
initial
begin
	atualPC[10] = 1'b0;
end 
// atualPC[ 9 ]
initial
begin
	atualPC[9] = 1'b0;
end 
// atualPC[ 8 ]
initial
begin
	atualPC[8] = 1'b0;
end 
// atualPC[ 7 ]
initial
begin
	atualPC[7] = 1'b0;
end 
// atualPC[ 6 ]
initial
begin
	atualPC[6] = 1'b0;
end 
// atualPC[ 5 ]
initial
begin
	atualPC[5] = 1'b0;
end 
// atualPC[ 4 ]
initial
begin
	atualPC[4] = 1'b0;
end 
// atualPC[ 3 ]
initial
begin
	atualPC[3] = 1'b0;
end 
// atualPC[ 2 ]
initial
begin
	atualPC[2] = 1'b0;
end 
// atualPC[ 1 ]
initial
begin
	atualPC[1] = 1'b1;
end 
// atualPC[ 0 ]
initial
begin
	atualPC[0] = 1'b0;
end 
// imed[ 31 ]
initial
begin
	imed[31] = 1'b0;
end 
// imed[ 30 ]
initial
begin
	imed[30] = 1'b0;
end 
// imed[ 29 ]
initial
begin
	imed[29] = 1'b0;
end 
// imed[ 28 ]
initial
begin
	imed[28] = 1'b0;
end 
// imed[ 27 ]
initial
begin
	imed[27] = 1'b0;
end 
// imed[ 26 ]
initial
begin
	imed[26] = 1'b0;
end 
// imed[ 25 ]
initial
begin
	imed[25] = 1'b0;
end 
// imed[ 24 ]
initial
begin
	imed[24] = 1'b0;
end 
// imed[ 23 ]
initial
begin
	imed[23] = 1'b0;
end 
// imed[ 22 ]
initial
begin
	imed[22] = 1'b0;
end 
// imed[ 21 ]
initial
begin
	imed[21] = 1'b0;
end 
// imed[ 20 ]
initial
begin
	imed[20] = 1'b0;
end 
// imed[ 19 ]
initial
begin
	imed[19] = 1'b0;
end 
// imed[ 18 ]
initial
begin
	imed[18] = 1'b0;
end 
// imed[ 17 ]
initial
begin
	imed[17] = 1'b0;
end 
// imed[ 16 ]
initial
begin
	imed[16] = 1'b0;
end 
// imed[ 15 ]
initial
begin
	imed[15] = 1'b0;
end 
// imed[ 14 ]
initial
begin
	imed[14] = 1'b0;
end 
// imed[ 13 ]
initial
begin
	imed[13] = 1'b0;
end 
// imed[ 12 ]
initial
begin
	imed[12] = 1'b0;
end 
// imed[ 11 ]
initial
begin
	imed[11] = 1'b0;
end 
// imed[ 10 ]
initial
begin
	imed[10] = 1'b0;
end 
// imed[ 9 ]
initial
begin
	imed[9] = 1'b0;
end 
// imed[ 8 ]
initial
begin
	imed[8] = 1'b0;
end 
// imed[ 7 ]
initial
begin
	imed[7] = 1'b0;
end 
// imed[ 6 ]
initial
begin
	imed[6] = 1'b0;
end 
// imed[ 5 ]
initial
begin
	imed[5] = 1'b0;
end 
// imed[ 4 ]
initial
begin
	imed[4] = 1'b0;
end 
// imed[ 3 ]
initial
begin
	imed[3] = 1'b0;
end 
// imed[ 2 ]
initial
begin
	imed[2] = 1'b1;
end 
// imed[ 1 ]
initial
begin
	imed[1] = 1'b0;
end 
// imed[ 0 ]
initial
begin
	imed[0] = 1'b0;
end 

// neg
initial
begin
	neg = 1'b1;
	# 12500;
	repeat(7)
	begin
		neg = 1'b0;
		neg = #25000 1'b1;
		# 25000;
	end
	neg = 1'b0;
	neg = #25000 1'b1;
end 

// zero
always
begin
	zero = 1'b0;
	zero = #25000 1'b1;
	#25000;
end 
endmodule

