######### PROGRAMA ASSEMBLY #########
addi x1,x1, 4
addi x2,x2, 8
add x3, x1, x2
sw x3, x0 (5)
lw x4, x0(5)
addi x4, x4, 8 


#FIM
000000000100 00001 000 00001 0010011
000000001000 00010 000 00010 0010011
0000000 00001 00010 000 00011 0110011
0000000 00011 00000 010 00101 0100011
000000000101 00000 010 00100 0000011        
000000001000 00100 000 00100 0010011


=================================================
######### PROGRAMA ASSEMBLY #########
addi x1,x1, 4
addi x2,x2, 8
mul x3, x1, x2
addi x3, x3, 0 
div x4, x3, x2
addi x4, x4, 0


#FIM
000000000100 00001 000 00001 0010011
000000001000 00010 000 00010 0010011
0000000 00010 00001 011 00011 0110011
000000000000 00011 000 00011 0010011
0100000 00010 00011 011 00100 0110011
000000000000 00100 000 00100 0010011
===============================================
######### PROGRAMA ASSEMBLY #########
addi x1,x26, 7 //x1 = numero de termos
addi x2,x26, 0
addi x9,x26 1  // inicializa contador
OUT x26 //print 0
addi x3,x26, 1
OUT x3 // print 1
addi x6,x3, 0
add x3,x2, x3 
addi x2,x6 0
addi x9,x9 1  // contador
OUT x3 // print x3
bne x1,x9, -6
NOOP //bolha 
jr x26 // (nunca terminará)
NOOP //bolha
HALT

BIOS
000000000011 11010 000 00001 0010011 // addi x1, x26, 3 
000000000001 11010 000 00010 0010011 // addi x2, x26, 1 
0000000 00001 0000000000000 0010111 // OUT x1
0100000 00010 00001 000 00001 0110011 // sub x1, x1, x2
0000000 00001 0000000000000 0010111 // OUT x1
0100000 00010 00001 000 00001 0110011 // sub x1, x1, x2
0000000 00001 0000000000000 0010111 // OUT x1
0000000000000000000000000 0111111 // HALT

#FIM
000000000111 11010 000 00001 0010011
000000000000 11010 000 00010 0010011
000000000001 11010 000 01001 0010011
0000000 11010 0000000000000 0010111
000000000001 11010 000 00011 0010011
0000000 00011 0000000000000 0010111
000000000000 00011 000 00110 0010011
0000000 00011 00010 000 00011 0110011
000000000000 00110 000 00010 0010011
000000000001 01001 000 01001 0010011
0000000 00011 0000000000000 0010111
1111111 01001 00001 001 11010 1100011
00000000000000000000000000000000
0100000 11010 00000 111 00000 0110011
00000000000000000000000000000000
0000000000000000000000000 0111111

######### PROGRAMA ASSEMBLY #########
Testa memória de dados e transferências com HD

addi x0, x26, 3 
sw  x0, x26(2)
lw x2, x26(2) 
OUT x2;
REG_TO_HD x0 => T0 S1 
NOOP
HD_TO_REG x1 <= T0 S1 
OUT x1;
NOOP
HALT

#FIM

000000000011 11010 000 00000 0010011 
0000000 00000 11010 010 00010 0100011
000000000010 11010 010 00010 0000011        
0000000 00010 0000000000000 0010111
0000 000 00000 000001 00 00000  0111101
0000 000 00000 000001 00 00001  0111110
0000000 00001 0000000000000 0010111
00000000000000000000000000000000
00000000000000000000000000111111

--
00000000000000000001 11001 1101111 //jal $aux_so 1
0000010 11010 00000 111 00000 0110011 // JR_SO $zero 

-- potencia travado com teste de jr_ctx
00000000000000000001110111101111
00000000000101010000010100010011 // addi $x10, $x10, 1
00000000101011010010000010100011 // sw $x10 $zero(1) --> set id_proc = 1 
00000000000111010000111100010011
00000011101011010111000000110011 // JR_CTX
00000001111011010000111010110011
00000000000111110000111100010011
00000000000111110000111100010011
00000000000111110000111100010011
00000000000111101010000000000011
00000000000000000000000000111100
00000000000000000000000010110111
00000001101000001000000000110011
00000000000011101010000010100011
00000000001011101010000000000011
00000000000000000000000000111100
00000000000000000000000010110111
00000001101000001000000000110011
00000000000011101010000100100011
00000000001111101010000000000011
00000000000111101010000010000011
00000001101000001000000000110011
00000000000011101010000110100011
00000000001011101010000000000011
00000000001011010000000010010011
00000000000100000010000100110011
00000000000111010000110110010011
01000000001011011000000100110011
00000001101000010000100001100011
00000000000000000000000000000000
00000000001111101010000000000011
00000000001111101010000010000011
00000000000111101010000110000011
00000000001100001011001000110011
00000001101000100000000000110011
00000000000011101010000110100011
00000000001011101010000000000011
00000000001011101010000010000011
00000000000111010000000110010011
01000000001100001000001000110011
00000001101000100000000000110011
00000000000011101010000100100011
11111111111111101101110111101111
00000000000000000000000000000000
00000000001111101010000000000011
00000000000000000000000000010111
00000000000000000000000000111111


